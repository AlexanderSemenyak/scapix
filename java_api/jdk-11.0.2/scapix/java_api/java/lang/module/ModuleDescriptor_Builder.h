// Generated by Scapix Java API
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER_H
#define SCAPIX_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER_H

namespace scapix::java_api {

namespace java::lang { class String; }
namespace java::lang::module { class ModuleDescriptor; }
namespace java::lang::module { class ModuleDescriptor_Exports; }
namespace java::lang::module { class ModuleDescriptor_Opens; }
namespace java::lang::module { class ModuleDescriptor_Provides; }
namespace java::lang::module { class ModuleDescriptor_Requires; }
namespace java::lang::module { class ModuleDescriptor_Version; }
namespace java::util { class List; }
namespace java::util { class Set; }

namespace java::lang::module {

class ModuleDescriptor_Builder : public object_base<SCAPIX_META_STRING("java/lang/module/ModuleDescriptor$Builder"),
	java::lang::Object>
{
public:

	ref<java::lang::module::ModuleDescriptor_Builder> requires_(ref<java::lang::module::ModuleDescriptor_Requires> req);
	ref<java::lang::module::ModuleDescriptor_Builder> requires_(ref<java::util::Set> ms, ref<java::lang::String> mn, ref<java::lang::module::ModuleDescriptor_Version> compiledVersion);
	ref<java::lang::module::ModuleDescriptor_Builder> requires_(ref<java::util::Set> ms, ref<java::lang::String> mn);
	ref<java::lang::module::ModuleDescriptor_Builder> requires_(ref<java::lang::String> mn);
	ref<java::lang::module::ModuleDescriptor_Builder> exports(ref<java::lang::module::ModuleDescriptor_Exports> e);
	ref<java::lang::module::ModuleDescriptor_Builder> exports(ref<java::util::Set> ms, ref<java::lang::String> pn, ref<java::util::Set> targets);
	ref<java::lang::module::ModuleDescriptor_Builder> exports(ref<java::util::Set> ms, ref<java::lang::String> pn);
	ref<java::lang::module::ModuleDescriptor_Builder> exports(ref<java::lang::String> pn, ref<java::util::Set> targets);
	ref<java::lang::module::ModuleDescriptor_Builder> exports(ref<java::lang::String> pn);
	ref<java::lang::module::ModuleDescriptor_Builder> opens(ref<java::lang::module::ModuleDescriptor_Opens> obj);
	ref<java::lang::module::ModuleDescriptor_Builder> opens(ref<java::util::Set> ms, ref<java::lang::String> pn, ref<java::util::Set> targets);
	ref<java::lang::module::ModuleDescriptor_Builder> opens(ref<java::util::Set> ms, ref<java::lang::String> pn);
	ref<java::lang::module::ModuleDescriptor_Builder> opens(ref<java::lang::String> pn, ref<java::util::Set> targets);
	ref<java::lang::module::ModuleDescriptor_Builder> opens(ref<java::lang::String> pn);
	ref<java::lang::module::ModuleDescriptor_Builder> uses(ref<java::lang::String> service);
	ref<java::lang::module::ModuleDescriptor_Builder> provides(ref<java::lang::module::ModuleDescriptor_Provides> p);
	ref<java::lang::module::ModuleDescriptor_Builder> provides(ref<java::lang::String> service, ref<java::util::List> providers);
	ref<java::lang::module::ModuleDescriptor_Builder> packages(ref<java::util::Set> pns);
	ref<java::lang::module::ModuleDescriptor_Builder> version(ref<java::lang::module::ModuleDescriptor_Version> v);
	ref<java::lang::module::ModuleDescriptor_Builder> version(ref<java::lang::String> vs);
	ref<java::lang::module::ModuleDescriptor_Builder> mainClass(ref<java::lang::String> mc);
	ref<java::lang::module::ModuleDescriptor> build();

protected:

	ModuleDescriptor_Builder(handle_type h) : base_(h) {}

};

} // namespace java::lang::module
} // namespace scapix::java_api

#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Exports.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Opens.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Provides.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Requires.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Version.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>

namespace scapix::java_api {
namespace java::lang::module {

inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::requires_(ref<java::lang::module::ModuleDescriptor_Requires> req) { return call_method<SCAPIX_META_STRING("requires"), ref<java::lang::module::ModuleDescriptor_Builder>>(req); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::requires_(ref<java::util::Set> ms, ref<java::lang::String> mn, ref<java::lang::module::ModuleDescriptor_Version> compiledVersion) { return call_method<SCAPIX_META_STRING("requires"), ref<java::lang::module::ModuleDescriptor_Builder>>(ms, mn, compiledVersion); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::requires_(ref<java::util::Set> ms, ref<java::lang::String> mn) { return call_method<SCAPIX_META_STRING("requires"), ref<java::lang::module::ModuleDescriptor_Builder>>(ms, mn); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::requires_(ref<java::lang::String> mn) { return call_method<SCAPIX_META_STRING("requires"), ref<java::lang::module::ModuleDescriptor_Builder>>(mn); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::exports(ref<java::lang::module::ModuleDescriptor_Exports> e) { return call_method<SCAPIX_META_STRING("exports"), ref<java::lang::module::ModuleDescriptor_Builder>>(e); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::exports(ref<java::util::Set> ms, ref<java::lang::String> pn, ref<java::util::Set> targets) { return call_method<SCAPIX_META_STRING("exports"), ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn, targets); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::exports(ref<java::util::Set> ms, ref<java::lang::String> pn) { return call_method<SCAPIX_META_STRING("exports"), ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::exports(ref<java::lang::String> pn, ref<java::util::Set> targets) { return call_method<SCAPIX_META_STRING("exports"), ref<java::lang::module::ModuleDescriptor_Builder>>(pn, targets); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::exports(ref<java::lang::String> pn) { return call_method<SCAPIX_META_STRING("exports"), ref<java::lang::module::ModuleDescriptor_Builder>>(pn); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::opens(ref<java::lang::module::ModuleDescriptor_Opens> obj) { return call_method<SCAPIX_META_STRING("opens"), ref<java::lang::module::ModuleDescriptor_Builder>>(obj); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::opens(ref<java::util::Set> ms, ref<java::lang::String> pn, ref<java::util::Set> targets) { return call_method<SCAPIX_META_STRING("opens"), ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn, targets); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::opens(ref<java::util::Set> ms, ref<java::lang::String> pn) { return call_method<SCAPIX_META_STRING("opens"), ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::opens(ref<java::lang::String> pn, ref<java::util::Set> targets) { return call_method<SCAPIX_META_STRING("opens"), ref<java::lang::module::ModuleDescriptor_Builder>>(pn, targets); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::opens(ref<java::lang::String> pn) { return call_method<SCAPIX_META_STRING("opens"), ref<java::lang::module::ModuleDescriptor_Builder>>(pn); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::uses(ref<java::lang::String> service) { return call_method<SCAPIX_META_STRING("uses"), ref<java::lang::module::ModuleDescriptor_Builder>>(service); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::provides(ref<java::lang::module::ModuleDescriptor_Provides> p) { return call_method<SCAPIX_META_STRING("provides"), ref<java::lang::module::ModuleDescriptor_Builder>>(p); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::provides(ref<java::lang::String> service, ref<java::util::List> providers) { return call_method<SCAPIX_META_STRING("provides"), ref<java::lang::module::ModuleDescriptor_Builder>>(service, providers); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::packages(ref<java::util::Set> pns) { return call_method<SCAPIX_META_STRING("packages"), ref<java::lang::module::ModuleDescriptor_Builder>>(pns); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::version(ref<java::lang::module::ModuleDescriptor_Version> v) { return call_method<SCAPIX_META_STRING("version"), ref<java::lang::module::ModuleDescriptor_Builder>>(v); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::version(ref<java::lang::String> vs) { return call_method<SCAPIX_META_STRING("version"), ref<java::lang::module::ModuleDescriptor_Builder>>(vs); }
inline ref<java::lang::module::ModuleDescriptor_Builder> ModuleDescriptor_Builder::mainClass(ref<java::lang::String> mc) { return call_method<SCAPIX_META_STRING("mainClass"), ref<java::lang::module::ModuleDescriptor_Builder>>(mc); }
inline ref<java::lang::module::ModuleDescriptor> ModuleDescriptor_Builder::build() { return call_method<SCAPIX_META_STRING("build"), ref<java::lang::module::ModuleDescriptor>>(); }

} // namespace java::lang::module
} // namespace scapix::java_api

#endif // SCAPIX_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER_H
